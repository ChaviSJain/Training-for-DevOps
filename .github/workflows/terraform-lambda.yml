name: terraform-lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write   # needed for OIDC
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_IN_AUTOMATION: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: tf-lambda-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      # Cache pip for faster builds
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Package Lambda
      - name: Zip Lambda
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts
          cd $GITHUB_WORKSPACE/.github/workflows/lambda

          python -m pip install --upgrade pip

          if [ -f requirements.txt ]; then
            mkdir -p package
            pip install -r requirements.txt -t package/
            cp handler.py package/
            cd package
            zip -r $GITHUB_WORKSPACE/artifacts/lambda.zip .
          else
            zip -r $GITHUB_WORKSPACE/artifacts/lambda.zip handler.py
          fi

          echo "âœ… Lambda package created at $GITHUB_WORKSPACE/artifacts/lambda.zip"


      # AWS auth via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Terraform setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Cache .terraform dir
      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -upgrade

      - name: Terraform Fmt
        working-directory: terraform
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var "region=${AWS_REGION}" \
            -var "function_name=hello-from-actions" \
            -var "lambda_zip_path=${{ github.workspace }}/artifacts/lambda.zip" \
            -out plan.out

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: terraform
        run: |
          terraform apply -auto-approve plan.out
